;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 11/12/2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8/000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;char Mode=0;    // clock mode==0 stopwatch==1 back_counter==2
;int Seconds=0;        //clock sec
;int Minutes=0;        //clock min
;int hour=0;        //ckock hour
;int counter=0;        //overflow conunter
;
;int s_Seconds=0;       //stopwatch sec
;int s_Minutes=0;       //stopwatch min
;int s_hour=0;       //stopwatch hour
;bit ss=0;      //stopwatch mode(start or stop) stop==0 start==1
;char Buffer[32]="";  //BUFFER for display
;
;int bc_Seconds=0;     //back counter sec
;int bc_Minutes=0;     //back counter min
;int bc_hour=0;        //back counter hour
;bit bc_start=0;       //back counter mode(start or stop) stop==0 start==1
;int Rust_time=0;     //timer ON Rust end back counter
;
;int at_Minutes=0;
;int at_hour=0;
;bit alarm_is_set=0;
;
;
;char key_flag=0;/*flag for find pressed key       key_flag==0 nothing
;                                                  key_flag==1(in clock mode==add min and in stopwatch mode == start)
;                                                  key_flag==2(in clock mode==add hour and in stopwatch mode == stop)
;                                                  key_flag==3(rest in all modes)*/
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 003C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003D // Place your code here
; 0000 003E if(PINC.0 && key_flag==0)     //change Mode
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 003F Mode += 1;
;PCODE: $00000018 VOL: 0
; 0000 0040 if(PINC.1 && key_flag==0 && PINC.2==0)    //add min
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0041 key_flag=1;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0042 else if(PINC.2 && key_flag==0 && PINC.1==0)    //add hour
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0043 key_flag=2;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0044 else if(PINC.3 && key_flag==0)             //rest key
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0045 key_flag=3;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0046 else if(PINC.2 && PINC.1 && key_flag==0)   //start or stop in alarm mode and back counter
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0047 key_flag=4;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0048 }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 004C {
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 004D // Place your code here
; 0000 004E counter++;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 004F if(counter==3906){
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0050     counter=0;
;PCODE: $00000064 VOL: 0
; 0000 0051     Seconds++;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0052     if(ss==1)
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0053         s_Seconds++;       // add stopwatch second
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0054     if(bc_start==1)
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0055         bc_Seconds--;     // sub back counter second
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0056     if(Rust_time>0)
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0057         Rust_time--;     //Rust end time
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0058     }
;PCODE: $0000007F VOL: 0
; 0000 0059 }
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;
;void main(void)
; 0000 005C {
;PCODE: $00000084 VOL: 0
; 0000 005D // Declare your local variables here
; 0000 005E 
; 0000 005F // Input/Output Ports initialization
; 0000 0060 // Port A initialization
; 0000 0061 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0062 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0063 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0064 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0065 
; 0000 0066 // Port B initialization
; 0000 0067 // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0068 DDRB=(1<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0069 // State: Bit7=0 Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 006A PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 006B 
; 0000 006C // Port C initialization
; 0000 006D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 006E DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 006F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0070 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0071 
; 0000 0072 // Port D initialization
; 0000 0073 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0074 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0075 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0076 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0077 
; 0000 0078 // Timer/Counter 0 initialization
; 0000 0079 // Clock source: System Clock
; 0000 007A // Clock value: 1000/000 kHz
; 0000 007B // Mode: Normal top=0xFF
; 0000 007C // OC0 output: Disconnected
; 0000 007D // Timer Period: 0/256 ms
; 0000 007E TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 007F TCNT0=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0080 OCR0=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0081 
; 0000 0082 // Timer/Counter 1 initialization
; 0000 0083 // Clock source: System Clock
; 0000 0084 // Clock value: Timer1 Stopped
; 0000 0085 // Mode: Normal top=0xFFFF
; 0000 0086 // OC1A output: Disconnected
; 0000 0087 // OC1B output: Disconnected
; 0000 0088 // Noise Canceler: Off
; 0000 0089 // Input Capture on Falling Edge
; 0000 008A // Timer1 Overflow Interrupt: Off
; 0000 008B // Input Capture Interrupt: Off
; 0000 008C // Compare A Match Interrupt: Off
; 0000 008D // Compare B Match Interrupt: Off
; 0000 008E TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 008F TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0090 TCNT1H=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0091 TCNT1L=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0092 ICR1H=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0093 ICR1L=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0094 OCR1AH=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0095 OCR1AL=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0096 OCR1BH=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0097 OCR1BL=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0098 
; 0000 0099 // Timer/Counter 2 initialization
; 0000 009A // Clock source: System Clock
; 0000 009B // Clock value: Timer2 Stopped
; 0000 009C // Mode: Normal top=0xFF
; 0000 009D // OC2 output: Disconnected
; 0000 009E ASSR=0<<AS2;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 009F TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00A0 TCNT2=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00A1 OCR2=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00A2 
; 0000 00A3 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00A4 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00A5 
; 0000 00A6 // External Interrupt(s) initialization
; 0000 00A7 // INT0: On
; 0000 00A8 // INT0 Mode: Rising Edge
; 0000 00A9 // INT1: Off
; 0000 00AA // INT2: Off
; 0000 00AB GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00AC MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00AD MCUCSR=(0<<ISC2);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00AE GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00AF 
; 0000 00B0 // USART initialization
; 0000 00B1 // USART disabled
; 0000 00B2 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00B3 
; 0000 00B4 // Analog Comparator initialization
; 0000 00B5 // Analog Comparator: Off
; 0000 00B6 // The Analog Comparator's positive input is
; 0000 00B7 // connected to the AIN0 pin
; 0000 00B8 // The Analog Comparator's negative input is
; 0000 00B9 // connected to the AIN1 pin
; 0000 00BA ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00BB SFIOR=(0<<ACME);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00BC 
; 0000 00BD // ADC initialization
; 0000 00BE // ADC disabled
; 0000 00BF ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00C0 
; 0000 00C1 // SPI initialization
; 0000 00C2 // SPI disabled
; 0000 00C3 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00C4 
; 0000 00C5 // TWI initialization
; 0000 00C6 // TWI disabled
; 0000 00C7 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00C8 
; 0000 00C9 // Alphanumeric LCD initialization
; 0000 00CA // Connections are specified in the
; 0000 00CB // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00CC // RS - PORTA Bit 0
; 0000 00CD // RD - PORTA Bit 1
; 0000 00CE // EN - PORTA Bit 2
; 0000 00CF // D4 - PORTA Bit 4
; 0000 00D0 // D5 - PORTA Bit 5
; 0000 00D1 // D6 - PORTA Bit 6
; 0000 00D2 // D7 - PORTA Bit 7
; 0000 00D3 // Characters/line: 16
; 0000 00D4 lcd_init(16);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00D5 lcd_clear();
;PCODE: $000000D0 VOL: 0
; 0000 00D6 // Global enable interrupts
; 0000 00D7 #asm("sei")
;PCODE: $000000D1 VOL: 0
	sei
;PCODE: $000000D2 VOL: 0
; 0000 00D8 
; 0000 00D9 while (1)
;PCODE: $000000D3 VOL: 0
; 0000 00DA       {
; 0000 00DB       // Place your code here
; 0000 00DC 
; 0000 00DD       if(Mode>4)
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00DE         Mode=0;
;PCODE: $000000D7 VOL: 0
; 0000 00DF       //main clock
; 0000 00E0       if(Seconds==59){
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00E1         Minutes++;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00E2         Seconds=0;
;PCODE: $000000DF VOL: 0
; 0000 00E3       }
; 0000 00E4       if(Minutes==59){
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00E5         hour++;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00E6         Minutes=0;
;PCODE: $000000E7 VOL: 0
; 0000 00E7       }
; 0000 00E8       if(hour==24){
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00E9         hour=0;
;PCODE: $000000EC VOL: 0
; 0000 00EA       }
; 0000 00EB       //stopwatch clock
; 0000 00EC       if(ss==1){      //if ss=1 start stopwatch
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00ED         if(s_Seconds==59){
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00EE             s_Minutes++;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00EF             s_Seconds=0;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00F0         }
; 0000 00F1         if(s_Minutes==59){
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00F2             s_hour++;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00F3             s_Minutes=0;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00F4         }
; 0000 00F5         if(s_hour==24){
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00F6             s_hour=0;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00F7         }
; 0000 00F8       }
;PCODE: $0000010A VOL: 0
; 0000 00F9       if(bc_start && (bc_Seconds!=0 || bc_Minutes!=0 || bc_hour!=0)){    //if time !=0 and back counter is Enable
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00FA         if(bc_Seconds<0){
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00FB             bc_Minutes--;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00FC             bc_Seconds=59;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00FD         }
; 0000 00FE         if(bc_Minutes<0){
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00FF             bc_Minutes=59;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0100             bc_hour--;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0101         }
; 0000 0102       }
;PCODE: $00000131 VOL: 0
; 0000 0103       else if(bc_start && bc_Seconds==0 && bc_Minutes==0 && bc_hour==0){       //if back counter Enable and time==0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0104         Rust_time+=20;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0105         bc_start=0;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0106         PORTB.7=1;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0107       }
; 0000 0108       if(Rust_time<1)     //Turn off Rust back counter
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0109         PORTB.7=0;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 010A 
; 0000 010B       if(at_Minutes==Minutes && at_hour==hour && alarm_is_set){
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 010C         Rust_time+=20;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 010D         alarm_is_set=0;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 010E         PORTB.7=1;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 010F       }
; 0000 0110       if(Rust_time<1)     //Turn off Rust Alarm
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0111         PORTB.7=0;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0112 
; 0000 0113       //display and key functions
; 0000 0114       if(Mode==0){            //display clock mode
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 0115         lcd_gotoxy(0,0);
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0116         sprintf(Buffer,"CLOCK MODE      Now:  %i:%i:%i  ",hour,Minutes,Seconds);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0117         lcd_puts(Buffer);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0118         if(key_flag==1){        //if key_flag==1 min++
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0119             Minutes++;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 011A             Seconds=0;
;PCODE: $00000190 VOL: 0
; 0000 011B             key_flag=0;
;PCODE: $00000191 VOL: 0
; 0000 011C         }
; 0000 011D         else if(key_flag==2){   //if key_flag==2 hour++
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 011E             hour++;
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 011F             key_flag=0;
;PCODE: $0000019A VOL: 0
; 0000 0120         }
; 0000 0121         else if(key_flag==3){    //if key_flag==3    rest
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0122             Seconds=0;
;PCODE: $000001A0 VOL: 0
; 0000 0123             Minutes=0;
;PCODE: $000001A1 VOL: 0
; 0000 0124             hour=0;
;PCODE: $000001A2 VOL: 0
; 0000 0125             key_flag=0;
;PCODE: $000001A3 VOL: 0
; 0000 0126         }
; 0000 0127       }
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 0128       else if(Mode==1){          //dispaly stop watch mode
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0129         lcd_gotoxy(0,0);
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 012A         sprintf(Buffer,"STOP WATCH MODE Now:  %i:%i:%i  ",s_hour,s_Minutes,s_Seconds);
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 012B         lcd_puts(Buffer);
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 012C         if(key_flag==1){          //if key_flag==1 start stopwatch while not pressed stop key
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 012D             ss=1;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 012E             key_flag=0;
;PCODE: $000001CA VOL: 0
; 0000 012F         }
; 0000 0130         else if(key_flag==2){     //if key_flag==2 stop stopwatch
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 0131             ss=0;
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 0132             key_flag=0;
;PCODE: $000001D3 VOL: 0
; 0000 0133         }
; 0000 0134         else if(key_flag==3){    //if key_flag==3    rest
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0135             ss=0;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0136             s_Seconds=0;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 0137             s_Minutes=0;
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0138             s_hour=0;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 0139             key_flag=0;
;PCODE: $000001E2 VOL: 0
; 0000 013A 
; 0000 013B         }
; 0000 013C       }
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 013D       else if(Mode==2){         //dispaly back counter mode
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 013E         lcd_gotoxy(0,0);
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 013F         sprintf(Buffer,"BACK COUNTER         %i:%i:%i    ",bc_hour,bc_Minutes,bc_Seconds);
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0140         lcd_puts(Buffer);
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0141          if(key_flag==1){        //if key_flag==1 min++
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0142             bc_Minutes++;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0143             key_flag=0;
;PCODE: $0000020A VOL: 0
; 0000 0144             if(bc_Minutes>59)
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 0145                 bc_Minutes=0;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 0146         }
;PCODE: $00000210 VOL: 0
; 0000 0147         else if(key_flag==2){   //if key_flag==2 hour++
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0148             bc_hour++;
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 0149             key_flag=0;
;PCODE: $0000021A VOL: 0
; 0000 014A             if(bc_hour>24)
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 014B                 bc_hour=0;
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 014C         }
;PCODE: $00000220 VOL: 0
; 0000 014D         else if(key_flag==3){    //if key_flag==3    rest
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 014E             bc_Seconds=0;
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 014F             bc_Minutes=0;
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 0150             bc_hour=0;
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 0151             bc_start=0;
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0152             key_flag=0;
;PCODE: $0000022F VOL: 0
; 0000 0153         }
; 0000 0154         else if(key_flag==4){    //start or stop back counter
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0155             if(bc_Seconds==0 && bc_Minutes==0 && bc_hour==0){        //if befor set time start Rust 2 seconds
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0156                 PORTB.7=1;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 0157                 Rust_time=2;
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 0158                 key_flag=0;
;PCODE: $00000246 VOL: 0
; 0000 0159             }
; 0000 015A             else{              // if time is set can start(or resume) or stop
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 015B             bc_start ^=1;
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 015C             key_flag=0;
;PCODE: $00000250 VOL: 0
; 0000 015D             }
;PCODE: $00000251 VOL: 0
; 0000 015E         }
; 0000 015F       }
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0160       if(Mode==3){
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 0161         lcd_gotoxy(0,0);
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 0162         sprintf(Buffer,"ALARM MODE      at:%i:%i EN=%i  ",at_hour,at_Minutes,alarm_is_set);
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 0163         lcd_puts(Buffer);
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 0164         if(key_flag==1){        //if key_flag==1 min++
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 0165             at_Minutes++;
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 0166             key_flag=0;
;PCODE: $0000027C VOL: 0
; 0000 0167 
; 0000 0168         }
; 0000 0169         else if(key_flag==2){   //if key_flag==2 hour++
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 016A             at_hour++;
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 016B             key_flag=0;
;PCODE: $00000286 VOL: 0
; 0000 016C         }
; 0000 016D         else if(key_flag==3){    //if key_flag==3    rest
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 016E             alarm_is_set=0;
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 016F             at_Minutes=0;
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 0170             at_hour=0;
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 0171             key_flag=0;
;PCODE: $00000293 VOL: 0
; 0000 0172         }
; 0000 0173         else if(key_flag==4){    //Enable or disable alarm
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 0174             alarm_is_set^=1;
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 0175             key_flag=0;
;PCODE: $000002A0 VOL: 0
; 0000 0176         }
; 0000 0177       }
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 0178       key_flag=0;
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 0179       }
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 017A 
; 0000 017B }
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
